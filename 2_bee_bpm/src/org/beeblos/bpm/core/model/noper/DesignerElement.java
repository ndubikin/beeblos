package org.beeblos.bpm.core.model.noper;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

// Generated Oct 30, 2010 12:25:05 AM by Hibernate Tools 3.3.0.GA


/**
 * WStepDef generated by hbm2java
 * 
 * elemento para trabajar con la herramienta de dise√±o
 */
public class DesignerElement implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	Element task;

	private String xmlId = "";
	private String spId = "";
	private String spName = "";

	private String spStepComments;
	private String spResponses;
	private String spRules;
	private String spInstructions;

	// se usan en los edge pareceria ...
	private String xmlFromStepId;
	private String xmlToStepId;
	private String spFromStepId;
	private String spToStepId;	
	
	NodeList mxCellList;
	
	public DesignerElement() {
		super();
		_init();
	}
	
	public DesignerElement(boolean vacio) {
		super();
		_init();
	}

	private void _init() {
		xmlId = "";
		spId = "";
		spName = "";
		spStepComments = "";
		spResponses = "";
		spRules = "";
		spInstructions = "";
		xmlFromStepId = "";
		xmlToStepId = "";
		spFromStepId = "";
		spToStepId = "";
	}

	public DesignerElement(Element task, String xmlId, String spId,
			String spName, String spStepComments, String spResponses,
			String spRules, String spInstructions) {
		this.task = task;
		this.xmlId = xmlId;
		this.spId = spId;
		this.spName = spName;
		this.spStepComments = spStepComments;
		this.spResponses = spResponses;
		this.spRules = spRules;
		this.spInstructions = spInstructions;
	}
	
	
	public DesignerElement(Element element, String elementType) {
		
		if (elementType.equals("task")) {
			DesignerElementTask(element);
		} else {
			DesignerElementEdge(element);
		}
		
	}
	
	public void DesignerElementEdge(Element edge) {

		xmlId = edge.getAttribute("id");
		spId = edge.getAttribute("spId");
		spName = edge.getAttribute("label");
		spResponses = edge.getAttribute("responses");
		spRules = edge.getAttribute("rules");
		
		this.mxCellList = edge.getElementsByTagName("mxCell");
		
	}
	
	public void DesignerElementTask(Element task) {
		
		this.task=task;
		this.setXmlId( task.getAttribute("id") );
		this.setSpId( task.getAttribute("spId") );
		this.setSpName( task.getAttribute("label") );
		this.setSpStepComments( task.getAttribute("description") );
		this.setSpResponses( task.getAttribute("responses") );
		this.setSpRules( task.getAttribute("rules") );
		this.setSpInstructions( task.getAttribute("instructions") );
	}

	public Element getTask() {
		return task;
	}

	public void setTask(Element task) {
		this.task = task;
	}

	public String getXmlId() {
		return xmlId;
	}

	public void setXmlId(String xmlId) {
		this.xmlId = xmlId;
	}

	public String getSpId() {
		return spId;
	}

	public void setSpId(String spId) {
		this.spId = spId;
	}

	public String getSpName() {
		return spName;
	}

	public void setSpName(String spName) {
		this.spName = spName;
	}

	public String getSpStepComments() {
		return spStepComments;
	}

	public void setSpStepComments(String spStepComments) {
		this.spStepComments = spStepComments;
	}

	public String getSpResponses() {
		return spResponses;
	}

	public void setSpResponses(String spResponses) {
		this.spResponses = spResponses;
	}

	public String getSpRules() {
		return spRules;
	}

	public void setSpRules(String spRules) {
		this.spRules = spRules;
	}

	public String getSpInstructions() {
		return spInstructions;
	}

	public void setSpInstructions(String spInstructions) {
		this.spInstructions = spInstructions;
	}

	public String getXmlFromStepId() {
		return xmlFromStepId;
	}

	public void setXmlFromStepId(String xmlFromStepId) {
		this.xmlFromStepId = xmlFromStepId;
	}

	public String getXmlToStepId() {
		return xmlToStepId;
	}

	public void setXmlToStepId(String xmlToStepId) {
		this.xmlToStepId = xmlToStepId;
	}

	public String getSpFromStepId() {
		return spFromStepId;
	}

	public void setSpFromStepId(String spFromStepId) {
		this.spFromStepId = spFromStepId;
	}

	public String getSpToStepId() {
		return spToStepId;
	}

	public void setSpToStepId(String spToStepId) {
		this.spToStepId = spToStepId;
	}

	public NodeList getMxCellList() {
		return mxCellList;
	}

	public void setMxCellList(NodeList mxCellList) {
		this.mxCellList = mxCellList;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((spId == null) ? 0 : spId.hashCode());
		result = prime * result
				+ ((spInstructions == null) ? 0 : spInstructions.hashCode());
		result = prime * result + ((spName == null) ? 0 : spName.hashCode());
		result = prime * result
				+ ((spResponses == null) ? 0 : spResponses.hashCode());
		result = prime * result + ((spRules == null) ? 0 : spRules.hashCode());
		result = prime * result
				+ ((spStepComments == null) ? 0 : spStepComments.hashCode());
		result = prime * result + ((task == null) ? 0 : task.hashCode());
		result = prime * result + ((xmlId == null) ? 0 : xmlId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof DesignerElement))
			return false;
		DesignerElement other = (DesignerElement) obj;
		if (spId == null) {
			if (other.spId != null)
				return false;
		} else if (!spId.equals(other.spId))
			return false;
		if (spInstructions == null) {
			if (other.spInstructions != null)
				return false;
		} else if (!spInstructions.equals(other.spInstructions))
			return false;
		if (spName == null) {
			if (other.spName != null)
				return false;
		} else if (!spName.equals(other.spName))
			return false;
		if (spResponses == null) {
			if (other.spResponses != null)
				return false;
		} else if (!spResponses.equals(other.spResponses))
			return false;
		if (spRules == null) {
			if (other.spRules != null)
				return false;
		} else if (!spRules.equals(other.spRules))
			return false;
		if (spStepComments == null) {
			if (other.spStepComments != null)
				return false;
		} else if (!spStepComments.equals(other.spStepComments))
			return false;
		if (task == null) {
			if (other.task != null)
				return false;
		} else if (!task.equals(other.task))
			return false;
		if (xmlId == null) {
			if (other.xmlId != null)
				return false;
		} else if (!xmlId.equals(other.xmlId))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "DesignerElement ["
				+ (task != null ? "task=" + task + ", " : "")
				+ (xmlId != null ? "xmlId=" + xmlId + ", " : "")
				+ (spId != null ? "spId=" + spId + ", " : "")
				+ (spName != null ? "spName=" + spName + ", " : "")
				+ (spStepComments != null ? "spStepComments=" + spStepComments
						+ ", " : "")
				+ (spResponses != null ? "spResponses=" + spResponses + ", "
						: "")
				+ (spRules != null ? "spRules=" + spRules + ", " : "")
				+ (spInstructions != null ? "spInstructions=" + spInstructions
						: "") + "]";
	}

	

}
