package org.beeblos.bpm.core.model;

import org.beeblos.bpm.core.model.enumerations.ProcessDataFieldJDBCType;
import org.beeblos.bpm.core.model.enumerations.ProcessDataSynchroWithType;

// Generated Jul 29, 2013 1:15:55 PM by Hibernate Tools 3.4.0.CR1

import org.joda.time.DateTime;

import com.sp.common.model.en.DataFieldResultType;
import com.sp.common.model.en.WDataType;
/**
 * WProcessDataField generated by hbm2java
 * 
 * ProcessDataField is the field definition of Managed Data
 * 
 * Each Process can have a set of 'n' managed data fields and each one must be
 * defined as a ProcessDataField which will be defined at process level in WProcessHead
 * 
 * Accessing to process defined managed datafields will be by WProcessDef -> WProcessHead -> Set<WProcessDataField> processDataFieldDef
 * 
 * Direct access to a processDataField list must be obtained by:
 * 
 * dataFieldList = new WProcessDataFieldBL().getWProcessDataFieldList(wProcessDefId, currentUserId);
 * 
 */
public class WProcessDataField implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * autonumeric id
	 */
	private Integer id;
	/**
	 * process head belonging to
	 */
	private Integer processHeadId;
	/**
	 * data type belongs this field
	 * nes 20160521 - cambiado WDataType a enum...
	 */
	private WDataType dataType;
	/**
	 * processData field name
	 */
	private String name;
	/**
	 * Column name if there is a jdbc sinchronization available
	 */
	private String columnName;
	private Integer order;
	private boolean required;
	private String comments;
	/**
	 * Indicates this pdf is active. There is not possible to delete old
	 * or obsolete pdf then this field indicates there is an operative
	 * pdf or obsolete one
	 */
	private boolean active;
	/**
	 * Max length of data to control aspects
	 */
	private Integer length;
	/**
	 * indicates this pdf accepts null values
	 */
	private boolean nullable=true;
	/**
	 * no tengo claro unico que seria esto ... no tengo claro que controlariamos o 
	 * que implicancias podria tener ... :(
	 */
	private boolean unique=false;
	private boolean quoted=false;
	private String defaultValue;
	
	private boolean synchronize;
	
	/**
	 * Moved to a enum - dml 20170201
	 */
	private ProcessDataSynchroWithType synchroWith;

	private ProcessDataFieldJDBCType jdbcType;
	
	/**
	 * jdbc synchronization parameters
	 */
	private String schema;
	private String tableName;
	private String fieldName;

	/**
	 * application synchronization
	 */
	private String className;
	private String getMethod;
	private String putMethod;
	private String paramList;

// dml 20161102 - ITS: 1995 - no se usa, cambiado para poner el tipo de dato java en el enum WDataType	
//	/**
//	 * java class of type must get or put
//	 */
//	private String paramType;
	
	/**
	 * At process startup the fields are filled with external source data ...
	 */
	private boolean atProcessStartup;

	/**
	 * At "process end" the field data is sent to external source
	 */
	private boolean atProcessEnd;

	/**
	 * At process startup the fields are filled with external source data ...
	 */
	private boolean whenStepWorkIsInvoked;
	
	/**
	 * after step is processed the field data is sent to external source
	 */	
	private boolean whenStepWorkIsProcessed;

	/**
	 * This class contains the type where the DataField must take its value. The two
	 * options are:
	 * 
	 * 1. SET_VALUE -> The user in the workflow process will set the result (it is for strings, integer, booleans...)
	 * 2. SELECT_FROM_LIST -> a list of values will be presented to the user in order to force him to choose 
	 * one value. This option is for select one menu options
	 * 
	 * @author dmuleiro 20170201
	 */
	private DataFieldResultType resultType;
	private String resultTypeSelectFromListSQLQuery;
	
	// trail
	private DateTime insertDate;
	private Integer insertUser;
	private DateTime modDate;
	private Integer modUser;

	public WProcessDataField() {
		super();
	}
	
	public WProcessDataField(boolean createEmtpyObjects ){
		super();
		if ( createEmtpyObjects ) {
			
	//		this.dataType = new WDataType();nes 20160521 - cambiado WDataType a enum...
			
		}	
	}

	public WProcessDataField(Integer processHeadId, WDataType dataType,
			String name, Boolean required, String comments, Boolean active, Integer length,
			boolean nullable, boolean unique, boolean quoted, String defaultValue) {
		setProcessHeadId(processHeadId);
		setDataType(dataType);
		setName(name);
		setRequired(required);
		setComments(comments);
		setActive(active);
		setLength(length);
		setNullable(nullable);
		setUnique(unique);
		setQuoted(quoted);
		setDefaultValue(defaultValue);

	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public WDataType getDataType() {
		return dataType;
	}

	public void setDataType(WDataType dataType) {
		this.dataType = dataType;
	}
	
	/**
	 * utilityp method to work with Enum WDataType by ID
	 * nes 20160524
	 * @return
	 */
	public Integer getDataTypeCode() {

		if (this.dataType == null){
			return null;
		}
		return this.dataType.getId();
	}

	/**
	 * utilityp method to work with Enum WDataType by ID
	 * nes 20160524
	 * @param code
	 */
	public void setDataTypeCode(Integer code) {

		if (code == null){
			this.dataType = null;
			return;
		}
		this.dataType = WDataType.findByKey(code);
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getColumnName() {
		return columnName;
	}

	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}

	public Integer getOrder() {
		return order;
	}

	public void setOrder(Integer order) {
		this.order = order;
	}

	public boolean isRequired() {
		return required;
	}

	public void setRequired(boolean required) {
		this.required = required;
	}

	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	/**
	 * Indicates this pdf is active. There is not possible to delete old
	 * or obsolete pdf then this field indicates there is an operative
	 * pdf or obsolete one
	 */
	public boolean isActive() {
		return active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	public Integer getLength() {
		return length;
	}

	public void setLength(Integer length) {
		this.length = length;
	}

	public boolean isNullable() {
		return nullable;
	}

	public void setNullable(boolean nullable) {
		this.nullable = nullable;
	}

	public boolean isUnique() {
		return unique;
	}

	public void setUnique(boolean unique) {
		this.unique = unique;
	}

	public boolean isQuoted() {
		return quoted;
	}

	public void setQuoted(boolean quoted) {
		this.quoted = quoted;
	}

	public String getDefaultValue() {
		return defaultValue;
	}

	public void setDefaultValue(String defaultValue) {
		this.defaultValue = defaultValue;
	}

	
	public DataFieldResultType getResultType() {
		return resultType;
	}

	public void setResultType(DataFieldResultType resultType) {
		this.resultType = resultType;
	}

	/**
	 * Para devovler el código de la resultType y evitar nullPointerException si es null...
	 * 
	 * @author dmuleiro 20170201
	 * 
	 * @return
	 */
	public Integer getResultTypeCode() {

		if (this.resultType == null){
			return null;
		}
		return this.resultType.getCode();
	}

	/**
	 * This set method should only be used for the CRUD of the attribute from a <h:selectOneMenu>, because
	 * it is not possible to use the regular "set" (an <h:selectOneMenu> must set an attribute with 
	 * int/String value, not a DataFieldResultType) 
	 * 
	 * @author dmuleiro 20170201
	 * 
	 * @return
	 */
	public void setResultTypeCode(Integer code) {

		if (code == null){
			this.resultType = null;
			return;
		}
		this.resultType = DataFieldResultType.findByKey(code);
	}

	public String getResultTypeSelectFromListSQLQuery() {
		return resultTypeSelectFromListSQLQuery;
	}

	public void setResultTypeSelectFromListSQLQuery(String resultTypeSelectFromListSQLQuery) {
		this.resultTypeSelectFromListSQLQuery = resultTypeSelectFromListSQLQuery;
	}

	public boolean isSynchronize() {
	
		return synchronize;
	}

	
	public void setSynchronize(boolean synchronize) {
	
		this.synchronize = synchronize;
	}

	
	public ProcessDataSynchroWithType getSynchroWith() {
	
		return synchroWith;
	}

	
	public void setSynchroWith(ProcessDataSynchroWithType synchroWith) {
	
		this.synchroWith = synchroWith;
	}

	/**
	 * Para devovler el código del synchroWith y evitar nullPointerException si es null...
	 * 
	 * @author dmuleiro 20170201
	 * 
	 * @return
	 */
	public Integer getSynchroWithCode() {

		if (this.synchroWith == null){
			return null;
		}
		return this.synchroWith.getCode();
	}

	/**
	 * This set method should only be used for the CRUD of the attribute from a <h:selectOneMenu>, because
	 * it is not possible to use the regular "set" (an <h:selectOneMenu> must set an attribute with 
	 * int/String value, not a ProcessDataFieldJDBCType) 
	 * 
	 * @author dmuleiro 20170201
	 * 
	 * @return
	 */
	public void setSynchroWithCode(Integer code) {

		if (code == null){
			this.synchroWith = null;
			return;
		}
		this.synchroWith = ProcessDataSynchroWithType.findByKey(code);
	}

	
	public ProcessDataFieldJDBCType getJdbcType() {
		return jdbcType;
	}

	public void setJdbcType(ProcessDataFieldJDBCType jdbcType) {
		this.jdbcType = jdbcType;
	}

	/**
	 * Para devovler el código del jdbcType y evitar nullPointerException si es null...
	 * 
	 * @author dmuleiro 20170201
	 * 
	 * @return
	 */
	public Integer getJdbcTypeCode() {

		if (this.jdbcType == null){
			return null;
		}
		return this.jdbcType.getCode();
	}

	/**
	 * This set method should only be used for the CRUD of the attribute from a <h:selectOneMenu>, because
	 * it is not possible to use the regular "set" (an <h:selectOneMenu> must set an attribute with 
	 * int/String value, not a ProcessDataFieldJDBCType) 
	 * 
	 * @author dmuleiro 20170201
	 * 
	 * @return
	 */
	public void setJdbcTypeCode(Integer code) {

		if (code == null){
			this.jdbcType = null;
			return;
		}
		this.jdbcType = ProcessDataFieldJDBCType.findByKey(code);
	}

	public String getSchema() {
	
		return schema;
	}

	
	public void setSchema(String schema) {
	
		this.schema = schema;
	}

	
	public String getTableName() {
	
		return tableName;
	}

	
	public void setTableName(String tableName) {
	
		this.tableName = tableName;
	}

	
	public String getFieldName() {
	
		return fieldName;
	}

	
	public void setFieldName(String fieldName) {
	
		this.fieldName = fieldName;
	}

	
	public String getClassName() {
	
		return className;
	}

	
	public void setClassName(String className) {
	
		this.className = className;
	}

	
	public String getGetMethod() {
	
		return getMethod;
	}

	
	public void setGetMethod(String getMethod) {
	
		this.getMethod = getMethod;
	}

	
	public String getPutMethod() {
	
		return putMethod;
	}

	
	public void setPutMethod(String putMethod) {
	
		this.putMethod = putMethod;
	}

	
//	public String getParamType() {
//		return paramType;
//	}
//
//	public void setParamType(String paramType) {
//		this.paramType = paramType;
//	}

	public String getParamList() {
	
		return paramList;
	}

	
	public void setParamList(String paramList) {
	
		this.paramList = paramList;
	}

	
	public boolean isAtProcessStartup() {
	
		return atProcessStartup;
	}

	
	public void setAtProcessStartup(boolean atProcessStartup) {
	
		this.atProcessStartup = atProcessStartup;
	}

	
	public boolean isAtProcessEnd() {
	
		return atProcessEnd;
	}

	
	public void setAtProcessEnd(boolean atProcessEnd) {
	
		this.atProcessEnd = atProcessEnd;
	}

	
	public boolean isWhenStepWorkIsInvoked() {
	
		return whenStepWorkIsInvoked;
	}

	
	public void setWhenStepWorkIsInvoked(boolean whenStepWorkIsInvoked) {
	
		this.whenStepWorkIsInvoked = whenStepWorkIsInvoked;
	}

	
	public boolean isWhenStepWorkIsProcessed() {
	
		return whenStepWorkIsProcessed;
	}

	
	public void setWhenStepWorkIsProcessed(boolean whenStepWorkIsProcessed) {
	
		this.whenStepWorkIsProcessed = whenStepWorkIsProcessed;
	}

	public DateTime getInsertDate() {
		return this.insertDate;
	}

	public void setInsertDate(DateTime insertDate) {
		this.insertDate = insertDate;
	}

	public Integer getInsertUser() {
		return this.insertUser;
	}

	public Integer getProcessHeadId() {
		return processHeadId;
	}

	public void setProcessHeadId(Integer processHeadId) {
		this.processHeadId = processHeadId;
	}

	public void setInsertUser(Integer insertUser) {
		this.insertUser = insertUser;
	}

	public DateTime getModDate() {
		return this.modDate;
	}

	public void setModDate(DateTime modDate) {
		this.modDate = modDate;
	}

	public Integer getModUser() {
		return this.modUser;
	}

	public void setModUser(Integer modUser) {
		this.modUser = modUser;
	}

	@Override
	public String toString() {
		return "WProcessDataField ["
				+ (id != null ? "id=" + id + ", " : "")
				+ (processHeadId != null ? "processHeadId=" + processHeadId
						+ ", " : "")
				+ (dataType != null ? "dataType=" + dataType + ", " : "")
				+ (name != null ? "name=" + name + ", " : "")
				+ (columnName != null ? "columnName=" + columnName + ", " : "")
				+ (order != null ? "order=" + order + ", " : "")
				+ "required="
				+ required
				+ ", "
				+ (comments != null ? "comments=" + comments + ", " : "")
				+ "active="
				+ active
				+ ", "
				+ (length != null ? "length=" + length + ", " : "")
				+ "nullable="
				+ nullable
				+ ", unique="
				+ unique
				+ ", quoted="
				+ quoted
				+ ", "
				+ (defaultValue != null ? "defaultValue=" + defaultValue + ", "
						: "")
				+ "synchronize="
				+ synchronize
				+ ", "
				+ (synchroWith != null ? "synchroWith=" + synchroWith + ", " : "")
				+ (resultType != null ? "resultType=" + resultType + ", " : "")
				+ (resultTypeSelectFromListSQLQuery != null ? "resultTypeSelectFromListSQLQuery=" + resultTypeSelectFromListSQLQuery + ", " : "")
				+ (jdbcType != null ? "jdbcType=" + jdbcType + ", " : "")
				+ (schema != null ? "schema=" + schema + ", " : "")
				+ (tableName != null ? "tableName=" + tableName + ", " : "")
				+ (fieldName != null ? "fieldName=" + fieldName + ", " : "")
				+ (className != null ? "className=" + className + ", " : "")
				+ (getMethod != null ? "getMethod=" + getMethod + ", " : "")
				+ (putMethod != null ? "putMethod=" + putMethod + ", " : "")
				+ (paramList != null ? "paramList=" + paramList + ", " : "")
//				+ (paramType != null ? "paramType=" + paramType + ", " : "")
				+ "atProcessStartup=" + atProcessStartup + ", atProcessEnd="
				+ atProcessEnd + ", whenStepWorkIsInvoked="
				+ whenStepWorkIsInvoked + ", whenStepWorkIsProcessed="
				+ whenStepWorkIsProcessed + ", "
				+ (insertDate != null ? "insertDate=" + insertDate + ", " : "")
				+ (insertUser != null ? "insertUser=" + insertUser + ", " : "")
				+ (modDate != null ? "modDate=" + modDate + ", " : "")
				+ (modUser != null ? "modUser=" + modUser : "") + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (active ? 1231 : 1237);
		result = prime * result + (atProcessEnd ? 1231 : 1237);
		result = prime * result + (atProcessStartup ? 1231 : 1237);
		result = prime * result
				+ ((className == null) ? 0 : className.hashCode());
		result = prime * result
				+ ((columnName == null) ? 0 : columnName.hashCode());
		result = prime * result
				+ ((comments == null) ? 0 : comments.hashCode());
		result = prime * result
				+ ((dataType == null) ? 0 : dataType.hashCode());
		result = prime * result
				+ ((defaultValue == null) ? 0 : defaultValue.hashCode());
		result = prime * result
				+ ((fieldName == null) ? 0 : fieldName.hashCode());
		result = prime * result
				+ ((getMethod == null) ? 0 : getMethod.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((insertDate == null) ? 0 : insertDate.hashCode());
		result = prime * result
				+ ((insertUser == null) ? 0 : insertUser.hashCode());
		result = prime * result + ((length == null) ? 0 : length.hashCode());
		result = prime * result + ((modDate == null) ? 0 : modDate.hashCode());
		result = prime * result + ((modUser == null) ? 0 : modUser.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + (nullable ? 1231 : 1237);
		result = prime * result + ((order == null) ? 0 : order.hashCode());
		result = prime * result
				+ ((paramList == null) ? 0 : paramList.hashCode());
//		result = prime * result
//				+ ((paramType == null) ? 0 : paramType.hashCode());
		result = prime * result
				+ ((processHeadId == null) ? 0 : processHeadId.hashCode());
		result = prime * result
				+ ((putMethod == null) ? 0 : putMethod.hashCode());
		result = prime * result + (quoted ? 1231 : 1237);
		result = prime * result + (required ? 1231 : 1237);
		result = prime * result + ((schema == null) ? 0 : schema.hashCode());
		result = prime * result + ((synchroWith == null) ? 0 : synchroWith.hashCode());
		result = prime * result + ((resultType == null) ? 0 : resultType.hashCode());
		result = prime * result + ((resultTypeSelectFromListSQLQuery == null) ? 0 : resultTypeSelectFromListSQLQuery.hashCode());
		result = prime * result + ((jdbcType == null) ? 0 : jdbcType.hashCode());
		result = prime * result + (synchronize ? 1231 : 1237);
		result = prime * result
				+ ((tableName == null) ? 0 : tableName.hashCode());
		result = prime * result + (unique ? 1231 : 1237);
		result = prime * result + (whenStepWorkIsInvoked ? 1231 : 1237);
		result = prime * result + (whenStepWorkIsProcessed ? 1231 : 1237);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof WProcessDataField))
			return false;
		WProcessDataField other = (WProcessDataField) obj;
		if (active != other.active)
			return false;
		if (atProcessEnd != other.atProcessEnd)
			return false;
		if (atProcessStartup != other.atProcessStartup)
			return false;
		if (className == null) {
			if (other.className != null)
				return false;
		} else if (!className.equals(other.className))
			return false;
		if (columnName == null) {
			if (other.columnName != null)
				return false;
		} else if (!columnName.equals(other.columnName))
			return false;
		if (comments == null) {
			if (other.comments != null)
				return false;
		} else if (!comments.equals(other.comments))
			return false;
		if (dataType == null) {
			if (other.dataType != null)
				return false;
		} else if (!dataType.equals(other.dataType))
			return false;
		if (defaultValue == null) {
			if (other.defaultValue != null)
				return false;
		} else if (!defaultValue.equals(other.defaultValue))
			return false;
		if (fieldName == null) {
			if (other.fieldName != null)
				return false;
		} else if (!fieldName.equals(other.fieldName))
			return false;
		if (getMethod == null) {
			if (other.getMethod != null)
				return false;
		} else if (!getMethod.equals(other.getMethod))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (insertDate == null) {
			if (other.insertDate != null)
				return false;
		} else if (!insertDate.equals(other.insertDate))
			return false;
		if (insertUser == null) {
			if (other.insertUser != null)
				return false;
		} else if (!insertUser.equals(other.insertUser))
			return false;
		if (length == null) {
			if (other.length != null)
				return false;
		} else if (!length.equals(other.length))
			return false;
		if (modDate == null) {
			if (other.modDate != null)
				return false;
		} else if (!modDate.equals(other.modDate))
			return false;
		if (modUser == null) {
			if (other.modUser != null)
				return false;
		} else if (!modUser.equals(other.modUser))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (nullable != other.nullable)
			return false;
		if (order == null) {
			if (other.order != null)
				return false;
		} else if (!order.equals(other.order))
			return false;
		if (paramList == null) {
			if (other.paramList != null)
				return false;
		} else if (!paramList.equals(other.paramList))
			return false;
//		if (paramType == null) {
//			if (other.paramType != null)
//				return false;
//		} else if (!paramType.equals(other.paramType))
//			return false;
		if (processHeadId == null) {
			if (other.processHeadId != null)
				return false;
		} else if (!processHeadId.equals(other.processHeadId))
			return false;
		if (putMethod == null) {
			if (other.putMethod != null)
				return false;
		} else if (!putMethod.equals(other.putMethod))
			return false;
		if (quoted != other.quoted)
			return false;
		if (required != other.required)
			return false;
		if (schema == null) {
			if (other.schema != null)
				return false;
		} else if (!schema.equals(other.schema))
			return false;
		if (synchroWith == null) {
			if (other.synchroWith != null)
				return false;
		} else if (!synchroWith.equals(other.synchroWith))
			return false;
		if (resultType == null) {
			if (other.resultType != null)
				return false;
		} else if (!resultType.equals(other.resultType))
			return false;
		if (resultTypeSelectFromListSQLQuery == null) {
			if (other.resultTypeSelectFromListSQLQuery != null)
				return false;
		} else if (!resultTypeSelectFromListSQLQuery.equals(other.resultTypeSelectFromListSQLQuery))
			return false;
		if (jdbcType == null) {
			if (other.jdbcType != null)
				return false;
		} else if (!jdbcType.equals(other.jdbcType))
			return false;
		if (synchronize != other.synchronize)
			return false;
		if (tableName == null) {
			if (other.tableName != null)
				return false;
		} else if (!tableName.equals(other.tableName))
			return false;
		if (unique != other.unique)
			return false;
		if (whenStepWorkIsInvoked != other.whenStepWorkIsInvoked)
			return false;
		if (whenStepWorkIsProcessed != other.whenStepWorkIsProcessed)
			return false;
		return true;
	}

}
