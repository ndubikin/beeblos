package org.beeblos.bpm.core.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.joda.time.DateTime;

//import static com.sp.common.util.ConstantsCommon.EMPTY_OBJECT;

// Generated Nov 9, 2011 1:15:47 PM by Hibernate Tools 3.4.0.CR1

/**
 * WRoleDef generated by hbm2java
 */
public class WRoleDef implements java.io.Serializable {

	/**
	 * Definition of a role: name, desctiption and eventually an objectType related 
	 * and their id 
	 * 
	 * To know wich users are related with a role you must see w_step_role object ...
	 * w_step_role represents the relation table and if you ask for an user you can
	 * obtain the list of roles belonging to
	 * 
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private Integer id;
	private String name;
	private String description;
	private Integer idObject;
	private String idObjectType;
	
	/**
	 * indicates this is a system role
	 * system role can't be deleted by users
	 * there are some mandatory roles must be exist in the system: ie: ORIGINATOR
	 * and PROCESS_ADMIN
	 * nes 20141016
	 */
	private boolean systemRole;
	
	/**
	 * idicates if the role is a predefined (static) role or it is a 
	 * runtime role.
	 * Runtime role indicates the users are assigned to role at runtime.
	 * The fact to assign the users at runtime implies same role (roleId-rolename)
	 * may have different users for different objects or process.
	 * At this time the runtime role will be related with a process work (WProcessWork):
	 * each runtime role there will be same for a WProcessWork and it will be change
	 * between different WProcessWork.
	 * This flag will be related with WUserRoleWork (w_user_role_work): if the role
	 * is a runtime role the WUserRoleWork will be the users belonging to this role
	 * for each WProcessWork using it.
	 * nes 20141206
	 *  
	 */
	private boolean runtimeRole;
	
	/**
	 * Users belonging this role
	 * MANY2MANY
	 */
	Set<WUserRole> usersRelated=new HashSet<WUserRole>();

	/**
	 * timestamps
	 */
	private Integer insertUser;
	private DateTime insertDate;
	private Integer modUser;
	private DateTime modDate;

	public WRoleDef() {
		super();
	}

	public WRoleDef(boolean createEmtpyObjects ){
		super();
//		if ( createEmtpyObjects ) {
			// no objects to create for now ...
//		}	
	}
	
	public WRoleDef(Integer id) {
		this.id = id;
	}

	public WRoleDef(String name) {
		this.name = name;
	}

	public WRoleDef(String name, String description, Integer idObject,
			String idObjectType) {
		this.name = name;
		this.description = description;
		this.idObject = idObject;
		this.idObjectType = idObjectType;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Integer getIdObject() {
		return this.idObject;
	}

	public void setIdObject(Integer idObject) {
		this.idObject = idObject;
	}

	public String getIdObjectType() {
		return this.idObjectType;
	}

	public void setIdObjectType(String idObjectType) {
		this.idObjectType = idObjectType;
	}

	/**
	 * @return the systemRole
	 */
	public boolean isSystemRole() {
		return systemRole;
	}

	/**
	 * @param systemRole the systemRole to set
	 */
	public void setSystemRole(boolean systemRole) {
		this.systemRole = systemRole;
	}

	public Set<WUserRole> getUsersRelated() {
		return usersRelated;
	}

	public List<WUserRole> getUsersRelatedAsList() {
		if (usersRelated != null){
			return new ArrayList<WUserRole>(usersRelated);
		}
		return null;
	}
	
	public void setUsersRelated(Set<WUserRole> usersRelated) {
		this.usersRelated = usersRelated;
	}

	public Integer getInsertUser() {
		return insertUser;
	}

	public void setInsertUser(Integer insertUser) {
		this.insertUser = insertUser;
	}

	public DateTime getInsertDate() {
		return insertDate;
	}

	public void setInsertDate(DateTime insertDate) {
		this.insertDate = insertDate;
	}

	public Integer getModUser() {
		return modUser;
	}

	public void setModUser(Integer modUser) {
		this.modUser = modUser;
	}

	public DateTime getModDate() {
		return modDate;
	}

	public void setModDate(DateTime modDate) {
		this.modDate = modDate;
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((idObject == null) ? 0 : idObject.hashCode());
		result = prime * result + ((idObjectType == null) ? 0 : idObjectType.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public String toString() {
		return "WRoleDef ["
				+ (id != null ? "id=" + id + ", " : "")
				+ (name != null ? "name=" + name + ", " : "")
				+ (description != null ? "description=" + description + ", "
						: "")
				+ (idObject != null ? "idObject=" + idObject + ", " : "")
				+ (idObjectType != null ? "idObjectType=" + idObjectType + ", "
						: "")
				+ (insertUser != null ? "insertUser=" + insertUser + ", " : "")
				+ (insertDate != null ? "insertDate=" + insertDate + ", " : "")
				+ (modUser != null ? "modUser=" + modUser + ", " : "")
				+ (modDate != null ? "modDate=" + modDate : "") + "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		WRoleDef other = (WRoleDef) obj;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (idObject == null) {
			if (other.idObject != null)
				return false;
		} else if (!idObject.equals(other.idObject))
			return false;
		if (idObjectType == null) {
			if (other.idObjectType != null)
				return false;
		} else if (!idObjectType.equals(other.idObjectType))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (usersRelated == null) {
			if (other.usersRelated != null)
				return false;
		} else if (!usersRelated.equals(other.usersRelated))
			return false;
		return true;
	}		
	

	public boolean empty() {

		if (id!=null && ! id.equals(0)) return false;
		
		if (name!=null && ! "".equals(name)) return false;
		if (description!=null && ! "".equals(description)) return false;
		if (idObject!=null && ! idObject.equals(0)) return false;
		if (idObjectType!=null && ! "".equals(idObjectType)) return false;		
		
		return true;
	}
/*
	// dml 20120508
	public void addUser( WUserDef user, boolean active, Integer insertUser ) {
		WUserRole wur = new WUserRole(active, insertUser, new DateTime());
		wur.setRole(this);
		wur.setUser(user);
		usersRelated.add(wur);
	}
*/	
}
