package org.beeblos.bpm.core.model;

import static com.sp.common.util.ConstantsCommon.EMPTY_OBJECT;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.joda.time.DateTime;

// Generated Oct 30, 2010 12:25:05 AM by Hibernate Tools 3.3.0.GA

/**
 * Routes from the steps to another steps or to the end of a process
 * Routes are the connections between steps and build the enabled ways
 * in a process 
 * A route may only connect two steps. Routes from or to a non-step 
 * are invalid or not permitted 
 * Routes indicates possible ways in the process
 * 
 * WStepSequenceDef generated by hbm2java
 */
public class WStepSequenceDef implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * sequence def id
	 */
	private Integer id;
	
	/**
	 * indicates belonged process version 
	 */
	private WProcessDef process;
	/**
	 * Sequence name / label
	 */
	private String name;
	
	/**
	 * to order sequences (principally for evaluation purpose)
	 * nes 20130913
	 */
	private Integer order; 
	
	/**
	 * 
	 */
	private WStepDef fromStep;
	private WStepDef toStep;
	
	/**
	 * indicates if this route is enabled or disabled
	 */
	private boolean enabled;

	/**
	 * Indicates always the step is executed must run this route
	 */
	private boolean afterAll;
	
	/**
	 * Deleted route - normally enabled will be turn at false...
	 * dml 20130829 - si se intenta borrar y tiene "w_step_work_sequence" 
	 * asociados se marca como deleted para hacer PURGE en caso de que este activo (SOLO DESARROLLO)
	 */
	private boolean deleted; 
	
	/**
	 * optionally indicates the list of idResponse comma separated
	 */
	private String validResponses; 
	
	// 
	/**
	 * rules to apply this route - 20141025: not implemented yet
	 * dml 20130727
	 */
	private String rules;

	/**
	 * nes 20140207
	 * External methods allowed to be executed or invoked by this process
	 * Designer/Programmer responsibility to allow context class and method reachable
	 * at execution time 
	 * Invoking external method must be linked with sequence (routes), step (before
	 * load step, after executing step), process (at start time or at end process time), etc. 
	 * 
	 */
	private Set<WExternalMethod> externalMethod = new HashSet<WExternalMethod>(0);
	
	/**
	 * timestamps
	 */
	private Integer insertUser;
	private DateTime insertDate;
	private Integer modUser;
	private DateTime modDate;

	public WStepSequenceDef() {
	}


	public WStepSequenceDef(boolean createEmtpyObjects ){
		super();
		if ( createEmtpyObjects ) {
			this.process = new WProcessDef( EMPTY_OBJECT );
			this.fromStep = new WStepDef( EMPTY_OBJECT );
			this.toStep = new WStepDef( EMPTY_OBJECT );
			
		}	
	}

	/**
	 * Creates a new StepSequence def (route) beginning in fromStep and ending in toStep
	 * 
	 * @param id
	 * @param process
	 * @param order
	 * @param fromStep
	 * @param toStep
	 * @param enabled
	 * @param afterAll
	 * @param deleted
	 * @param validResponses
	 * @param name
	 */
	public WStepSequenceDef(Integer id, WProcessDef process, Integer order,
			WStepDef fromStep, WStepDef toStep, boolean enabled,
			boolean afterAll, boolean deleted, String validResponses, String name) {
		super();
		this.id = id;
		this.process = process;
		this.order = order;
		this.fromStep = fromStep;
		this.toStep = toStep;
		this.enabled = enabled;
		this.afterAll = afterAll;
		this.deleted = deleted;
		this.validResponses = validResponses;
		this.name = name;
	}

	public WStepSequenceDef(WProcessDef process, Integer order,
			WStepDef fromStep, WStepDef toStep, boolean enabled,
			boolean afterAll, boolean deleted, String validResponses, String name) {
		super();
	
		this.process = process;
		this.order = order;
		this.fromStep = fromStep;
		this.toStep = toStep;
		this.enabled = enabled;
		this.afterAll = afterAll;
		this.deleted = deleted;
		this.validResponses = validResponses;
		this.name = name;
	}

	public WStepSequenceDef(Integer id) {
		super();
		this.id = id;
	}


	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public Integer getOrder() {
		return order;
	}


	public void setOrder(Integer order) {
		this.order = order;
	}


	/**
	 * @return the process
	 */
	public WProcessDef getProcess() {
		return process;
	}



	/**
	 * @param process the process to set
	 */
	public void setProcess(WProcessDef process) {
		this.process = process;
	}



	/**
	 * @return the fromStep
	 */
	public WStepDef getFromStep() {
		return fromStep;
	}



	/**
	 * @param fromStep the fromStep to set
	 */
	public void setFromStep(WStepDef fromStep) {
		this.fromStep = fromStep;
	}



	/**
	 * @return the toStep
	 */
	public WStepDef getToStep() {
		return toStep;
	}



	/**
	 * @param toStep the toStep to set
	 */
	public void setToStep(WStepDef toStep) {
		this.toStep = toStep;
	}






	/**
	 * @return the enabled
	 */
	public boolean isEnabled() {
		return enabled;
	}



	/**
	 * @param enabled the enabled to set
	 */
	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}



	/**
	 * @return the afterAll
	 */
	public boolean isAfterAll() {
		return afterAll;
	}



	/**
	 * @param afterAll the afterAll to set
	 */
	public void setAfterAll(boolean afterAll) {
		this.afterAll = afterAll;
	}



	public boolean isDeleted() {
		return deleted;
	}


	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}


	/**
	 * @return the validResponses
	 */
	public String getValidResponses() {
		return validResponses;
	}



	/**
	 * @param validResponses the validResponses to set
	 */
	public void setValidResponses(String validResponses) {
		this.validResponses = validResponses;
	}



	public Set<WExternalMethod> getExternalMethod() {
		return externalMethod;
	}


	public void setExternalMethod(Set<WExternalMethod> externalMethod) {
		this.externalMethod = externalMethod;
	}


	public String getRules() {
		return rules;
	}


	public void setRules(String rules) {
		this.rules = rules;
	}


	public Integer getInsertUser() {
		return insertUser;
	}


	public void setInsertUser(Integer insertUser) {
		this.insertUser = insertUser;
	}


	public DateTime getInsertDate() {
		return insertDate;
	}


	public void setInsertDate(DateTime insertDate) {
		this.insertDate = insertDate;
	}


	public Integer getModUser() {
		return modUser;
	}


	public void setModUser(Integer modUser) {
		this.modUser = modUser;
	}


	public DateTime getModDate() {
		return modDate;
	}


	public void setModDate(DateTime modDate) {
		this.modDate = modDate;
	}

	/**
	 * @author rrl 20141104
	 * 
	 * nullates empty objects to persist
	 */
	public void nullateEmtpyObjects() {

		if (process!=null && process.empty()) process=null;
		if (fromStep!=null && fromStep.empty()) fromStep=null;
		if (toStep!=null && toStep.empty()) toStep=null;
		if (externalMethod!=null && externalMethod.isEmpty()) externalMethod=null;
	}
	
	/**
	  * @author rrl 20141104
	  * 
	  * recover empty objects to persist
	  */
	public void recoverEmtpyObjects() {

		if (process==null) process = new WProcessDef();
		if (fromStep==null) fromStep = new WStepDef();
		if (toStep==null) toStep = new WStepDef();
		if (externalMethod==null) externalMethod = new HashSet<WExternalMethod>();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (afterAll ? 1231 : 1237);
		result = prime * result + (deleted ? 1231 : 1237);
		result = prime * result + (enabled ? 1231 : 1237);
		result = prime * result
				+ ((fromStep == null) ? 0 : fromStep.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((order == null) ? 0 : order.hashCode());
		result = prime * result + ((process == null) ? 0 : process.hashCode());
		result = prime * result + ((rules == null) ? 0 : rules.hashCode());
		result = prime * result + ((toStep == null) ? 0 : toStep.hashCode());
		result = prime * result
				+ ((validResponses == null) ? 0 : validResponses.hashCode());
		return result;
	}



	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof WStepSequenceDef))
			return false;
		WStepSequenceDef other = (WStepSequenceDef) obj;
		if (afterAll != other.afterAll)
			return false;
		if (deleted != other.deleted)
			return false;
		if (enabled != other.enabled)
			return false;
		if (fromStep == null) {
			if (other.fromStep != null)
				return false;
		} else if (!fromStep.equals(other.fromStep))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (order == null) {
			if (other.order != null)
				return false;
		} else if (!order.equals(other.order))
			return false;
		if (process == null) {
			if (other.process != null)
				return false;
		} else if (!process.equals(other.process))
			return false;
		if (rules == null) {
			if (other.rules != null)
				return false;
		} else if (!rules.equals(other.rules))
			return false;
		if (toStep == null) {
			if (other.toStep != null)
				return false;
		} else if (!toStep.equals(other.toStep))
			return false;
		if (validResponses == null) {
			if (other.validResponses != null)
				return false;
		} else if (!validResponses.equals(other.validResponses))
			return false;
		return true;
	}



	@Override
	public String toString() {
		final int maxLen = 2;
		return "WStepSequenceDef ["
				+ (id != null ? "id=" + id + ", " : "")
				+ (process != null ? "process=" + process + ", " : "")
				+ (name != null ? "name=" + name + ", " : "")
				+ (order != null ? "order=" + order + ", " : "")
				+ (fromStep != null ? "fromStep=" + fromStep + ", " : "")
				+ (toStep != null ? "toStep=" + toStep + ", " : "")
				+ "enabled="
				+ enabled
				+ ", afterAll="
				+ afterAll
				+ ", deleted="
				+ deleted
				+ ", "
				+ (validResponses != null ? "validResponses=" + validResponses
						+ ", " : "")
				+ (rules != null ? "rules=" + rules + ", " : "")
				+ (externalMethod != null ? "externalMethod="
						+ toString(externalMethod, maxLen) + ", " : "")
				+ (insertUser != null ? "insertUser=" + insertUser + ", " : "")
				+ (insertDate != null ? "insertDate=" + insertDate + ", " : "")
				+ (modUser != null ? "modUser=" + modUser + ", " : "")
				+ (modDate != null ? "modDate=" + modDate : "") + "]";
	}


	private String toString(Collection<?> collection, int maxLen) {
		StringBuilder builder = new StringBuilder();
		builder.append("[");
		int i = 0;
		for (Iterator<?> iterator = collection.iterator(); iterator.hasNext()
				&& i < maxLen; i++) {
			if (i > 0)
				builder.append(", ");
			builder.append(iterator.next());
		}
		builder.append("]");
		return builder.toString();
	}


}
